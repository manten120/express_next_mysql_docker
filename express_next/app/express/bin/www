#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var http = require('http');
var debug = require('debug')('server:server');


//=== code for Next.js ===//
const next = require('next')
const dev = process.env.NODE_DEV !== 'production' //true false
const nextApp = next({ dev })
const handle = nextApp.getRequestHandler() //part of next config

nextApp.prepare().then(() => {
  app.get('*', (req,res) => {
    return handle(req,res) // for all the react stuff
  })

  //=== code for Express ===//

  /**
   * code moved from app.js
   */
  // catch 404 and forward to error handler
  app.use(function(req, res, next) {
   next(createError(404));
  });
  
  // error handler
  app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};

    // render the error page
    res.status(err.status || 500);
    res.render('error');
  });

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);
    
    if (isNaN(port)) {
      // named pipe
      return val;
    }
    
    if (port >= 0) {
      // port number
      return port;
    }
    
    return false;
  }

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '8081');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }
    
    var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
    
    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */
  
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
  //=== END code for Express ===//

})
//=== END code for Next.js ===//